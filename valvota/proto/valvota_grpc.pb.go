// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/valvota.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubmitVotesService_SubmitVotes_FullMethodName = "/valvota.SubmitVotesService/SubmitVotes"
)

// SubmitVotesServiceClient is the client API for SubmitVotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmitVotesServiceClient interface {
	SubmitVotes(ctx context.Context, in *SubmitVotesRequest, opts ...grpc.CallOption) (*SubmitVotesResponse, error)
}

type submitVotesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmitVotesServiceClient(cc grpc.ClientConnInterface) SubmitVotesServiceClient {
	return &submitVotesServiceClient{cc}
}

func (c *submitVotesServiceClient) SubmitVotes(ctx context.Context, in *SubmitVotesRequest, opts ...grpc.CallOption) (*SubmitVotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitVotesResponse)
	err := c.cc.Invoke(ctx, SubmitVotesService_SubmitVotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmitVotesServiceServer is the server API for SubmitVotesService service.
// All implementations must embed UnimplementedSubmitVotesServiceServer
// for forward compatibility.
type SubmitVotesServiceServer interface {
	SubmitVotes(context.Context, *SubmitVotesRequest) (*SubmitVotesResponse, error)
	mustEmbedUnimplementedSubmitVotesServiceServer()
}

// UnimplementedSubmitVotesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubmitVotesServiceServer struct{}

func (UnimplementedSubmitVotesServiceServer) SubmitVotes(context.Context, *SubmitVotesRequest) (*SubmitVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVotes not implemented")
}
func (UnimplementedSubmitVotesServiceServer) mustEmbedUnimplementedSubmitVotesServiceServer() {}
func (UnimplementedSubmitVotesServiceServer) testEmbeddedByValue()                            {}

// UnsafeSubmitVotesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmitVotesServiceServer will
// result in compilation errors.
type UnsafeSubmitVotesServiceServer interface {
	mustEmbedUnimplementedSubmitVotesServiceServer()
}

func RegisterSubmitVotesServiceServer(s grpc.ServiceRegistrar, srv SubmitVotesServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubmitVotesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubmitVotesService_ServiceDesc, srv)
}

func _SubmitVotesService_SubmitVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitVotesServiceServer).SubmitVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmitVotesService_SubmitVotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitVotesServiceServer).SubmitVotes(ctx, req.(*SubmitVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmitVotesService_ServiceDesc is the grpc.ServiceDesc for SubmitVotesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmitVotesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "valvota.SubmitVotesService",
	HandlerType: (*SubmitVotesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitVotes",
			Handler:    _SubmitVotesService_SubmitVotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/valvota.proto",
}
